[{"id":531,"title":"Refaire Play en Golo - Chapitre 1 : Introduction","summary":"Introduction : présentation du langage et notion de micro framework","description":"Le chapitre 1 rappelle les bases de Golo et introduit la notion de micro frameworks ainsi que la mise en oeuvre d\u0027un projet Golo avec l\u0027utilisation de Maven pour montrer comment faire ses courses lors de la construction d\u0027une stack web personnalisée, légère, hype \u0026 puissante (je fais de bons scores sous Gatling).\r\nCette première partie introduit les 7 parties suivantes :\r\n\r\n- Chapitre 2 : Redis (persistence de notre stack)\r\n- Chapitre 3 : MongoDb (persistence avancée de notre stack)\r\n- Chapitre 4 : Spark (les routes, sessions, ...)\r\n- Chapitre 5 : CORS (les accès cross domains)\r\n- Chapitre 6 : SSE (\"streaming\")\r\n- Chapitre 7 : HotReload : le rechargement automatique pendant le développement (avec du java aussi)\r\n- Chapitre 8 : Front : générer un projet \"Single Page Application\" pour utiliser tout ça (\"à la YeoMan\")\r\n\r\n\r\n**Cela va sans dire : il faut à minima : Chapitre 1 + (2 ou 3) + 4 + (5 ou 6) + 7 + (8 optionnel)**\r\n\r\n","language":"fr","speakers":[23],"nbVotes":1},{"id":532,"title":"Refaire Play en Golo - Chapitre 2 : Redis","summary":"Utiliser les structures de Golo pour jouer avec Redis","description":"Où l\u0027on voit comment utiliser les structures et les augmentations pour utiliser le driver Jedis pour Redis\r\n\r\nUne structure c\u0027est ça :\r\n\r\n    struct human \u003d {\r\n      firstName\r\n      lastName\r\n    }\r\n\r\n**Cela va sans dire : il faut à minima : Chapitre 1 + (2 ou 3) + 4 + (5 ou 6) + 7 + (8 optionnel)**","language":"fr","speakers":[23],"nbVotes":1},{"id":533,"title":"Refaire Play en Golo - Chapitre 3 : MongoDb","summary":"Comment se connecter à MongoDb avec Golo avec les DynamicObjects","description":"Les DynamicObjects permettent de construire facilement des DSL et de se passer des classes, un très bon concept pour des modèles collants au BasicObjects de l\u0027api Java de MongoDB\r\n\r\nUn DynamicObject ressemble à ça :\r\n\r\n    let bobMorane \u003d DynamicObject()\r\n\r\n    bobMorane: firstName(\"Bob\"): lastName(\"Morane\") # setters\r\n\r\n    println(bobMorane: firstName() + \" \" + bobMorane:lastName()) # getters\r\n\r\n    bobMorane: sayHello(|this| -\u003e \"Hello \" + this: firstName() + \" \" + this()) # add method \"on the fly\"\r\n\r\n    println(bobMorane: sayHello())\r\n\r\n**Cela va sans dire : il faut à minima : Chapitre 1 + (2 ou 3) + 4 + (5 ou 6) + 7 + (8 optionnel)**","language":"fr","speakers":[23],"nbVotes":1},{"id":534,"title":"Refaire Play en Golo - Chapitre 4 : Spark","summary":"On utilise les routes de Spark pour faire des services REST","description":"Nous allons utiliser le concept des Dynamic Adapter pour utiliser les Routes de SparkJava. Nous verrons aussi comment utiliser Jackson pour faire des services json\r\n\r\nUn Dynamic Adapter, qu\u0027est-ce que c\u0027est ?\r\nImaginez une sorte de variable (ou de constante) à laquelle vous donneriez le \"pouvoir\" de ressembler à une classe/interface existante tout en ayant la possibilité d\u0027implémenter ou surcharger les méthodes (mais sans ajouter de propriétés ou de méthodes) ... ça paraît complètement bizarre, je sais ;)\r\n\r\nMais pour vous donner envie l\u0027objectif est d\u0027arriver à quelque chose comme ceci :\r\n\r\n    GET(\"/hello\", |request, response| {\r\n      response: type(\"application/json\")\r\n      return json: message(\"hello world\")\r\n    })\r\n\r\n    GET(\"/hello/:who\", |request, response| {\r\n      response: type(\"application/json\")\r\n      return json: message(\"hello \" + request: params(\":who\"))\r\n    })\r\n\r\n    POST(\"/humans\", |request, response| {\r\n      response: type(\"application/json\")\r\n      let human \u003d Model(): fromJsonString(request: body())\r\n      human: generateId()\r\n      humans: addItem(human)\r\n\r\n      response: status(201) # 201: created\r\n      return human: toJsonString()\r\n    })\r\n\r\n**Cela va sans dire : il faut à minima : Chapitre 1 + (2 ou 3) + 4 + (5 ou 6) + 7 + (8 optionnel)**","language":"fr","speakers":[23],"nbVotes":3},{"id":535,"title":"Refaire Play en Golo - Chapitre 5 : CORS","summary":"Comment ajouter le support de CORS à notre framework","description":"CORS, ou Cross-Origin Resource Sharing, c\u0027est permettre à un navigateur de faire des requêtes cross-domain proprement (sans utiliser du JSONP) et du coup de proposer simplement des services faciles à utiliser pour des webapps sans mettre en oeuvre des mécaniques pénibles à utiliser.\r\n\r\n[http://www.html5rocks.com/en/tutorials/cors/](http://www.html5rocks.com/en/tutorials/cors/)\r\n\r\nNous ferons cela en utilisant l\u0027augmentation de la classe Response de SparkJava\r\n\r\n**Cela va sans dire : il faut à minima : Chapitre 1 + (2 ou 3) + 4 + (5 ou 6) + 7 + (8 optionnel)**\r\n","language":"fr","speakers":[23],"nbVotes":1},{"id":536,"title":"Refaire Play en Golo - Chapitre 6 : SSE","summary":"Ajouter le support des Server Sent Events en moins de 20 lignes","description":"Pour rester dans le Hype, nous allons ajouter la possibilité de streamer un flux de data vers le navigateur avec les SSE : [http://www.html5rocks.com/en/tutorials/eventsource/basics/](http://www.html5rocks.com/en/tutorials/eventsource/basics/).\r\nCela sera réalisé à nouveau avec les augmentations de classes.\r\n\r\n**Cela va sans dire : il faut à minima : Chapitre 1 + (2 ou 3) + 4 + (5 ou 6) + 7 + (8 optionnel)**","language":"fr","speakers":[23],"nbVotes":1},{"id":537,"title":"Refaire Play en Golo - Chapitre 7 : HotReload","summary":"Rechargement automatique de script lors de modification, mais aussi de recompilation de classes java","description":"... Et c\u0027est tout bête, 4,5 lignes de shell (ou de .bat), à nouveau un Dynamic Adapter, et un peu d\u0027aide avec `org.apache.commons.jci` et c\u0027est parti (c\u0027est du bricolage, ça vaudrait la peine d\u0027être amélioré mais ça fonctionne et c\u0027est pratique)\r\n\r\n**Cela va sans dire : il faut à minima : Chapitre 1 + (2 ou 3) + 4 + (5 ou 6) + 7 + (8 optionnel)**","language":"fr","speakers":[23],"nbVotes":1},{"id":538,"title":"Refaire Play en Golo - Chapitre 8 : Front","summary":"Le module sympa dans Play1 c\u0027était le module de CRUD, Golo permet le templating donc ...","description":"J\u0027ai pu faire un petit générateur à la YeoMan en Golo qui après avoir demandé à Bower de charger quelques assets, génère une structure projet, crée les modèles MongoDb, les routes, quelques formulaires, grilles (ReactJS + TwitterBootstrap), les modèles Backbone ...\r\n\r\nNous avons donc au final une stack Golo/Java/JS \"à la Play!\u003e1\" ultra légère qui peut même tourner sur un Raspberry PI\r\n\r\n**Cela va sans dire : il faut à minima : Chapitre 1 + (2 ou 3) + 4 + (5 ou 6) + 7 + (8 optionnel)**","language":"fr","speakers":[23],"nbVotes":1},{"id":539,"title":"Faire du web en Scala sans se faire mal : Finatra","summary":"Je suis le 1er à troller sur Scala ... et pourtant on peut en faire très simplement","description":"Je vous montrerais comment faire des services JSON en Scala utilisables directement dans une Single Page Application avec [Finatra](http://finatra.info/) et comment utiliser [sbt-revolver](https://github.com/spray/sbt-revolver) pour faire de l\u0027auto-reload\r\n","language":"fr","interests":[240,66,573,885,884],"speakers":[23],"nbVotes":1}]